group 'com.sdl.dxa'
version version

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def isRelease = !version.endsWith("-SNAPSHOT") && project.hasProperty('release')

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if (isRelease && !(project.hasProperty('signing.keyId') &&
                project.hasProperty('signing.secretKeyRingFile') &&
                project.hasProperty('signing.password'))) {
            def reader = System.in.newReader()
            println "\n\nWe have to sign some things in this build." +
                    "\n\nPlease enter your signing details."

            println "PGP Key Id: "
            def id = reader.readLine()

            println "PGP Secret Key Ring File (absolute path): "
            def file = reader.readLine()

            println "PGP Private Key Password: "
            def password = reader.readLine()

            allprojects { ext."signing.keyId" = id }
            allprojects { ext."signing.secretKeyRingFile" = file }
            allprojects { ext."signing.password" = password }

            reader.printf "\nThanks.\n\n"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

defaultTasks 'publishLocal'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

ext {
    pomFilePath = "${project.buildDir}/pom/pom.xml"
    pomFile = file(pomFilePath)
}

configurations {
    pom
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    pom pomFile
}

task signPom(type: Sign) {
    sign configurations.pom
}
signPom.enabled = isRelease

task signJars(type: Sign, dependsOn: [jar, signPom, javadocJar, sourceJar]) {
    sign configurations.archives
}
signJars.enabled = isRelease
task preparePublication(dependsOn: [signPom, signJars])

task publishLocal(dependsOn: [build, publishToMavenLocal])
task publishRemote(dependsOn: [build, preparePublication, publish])

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = project.ext.pomFile
    }
    tasks.signJars {
        dependsOn(generatePomFileForMavenJavaPublication)
    }
}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedPom = allFiles.find { it.name.contains('pom.xml') }
    def signedJar = (allFiles - [signedSources, signedJavadoc, signedPom])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar, classifier: null, extension: 'jar.asc'],
            [archive: signedPom, classifier: null, extension: 'pom.asc']
    ]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifacts {
                artifact sourceJar
                artifact javadocJar
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'DXA Builder')
                root.appendNode('description', 'Builder plugin for DXA projects used internally to organize build process')
                root.appendNode('packaging', 'jar')
                root.appendNode('url', 'https://www.sdl.com')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def developers = root.appendNode('developers')
                def addDeveloper = { developer, id, name, email ->
                    developer.appendNode('id', id)
                    developer.appendNode('name', name)
                    developer.appendNode('email', email)
                    developer.appendNode('timezone', '+1')
                    developer.appendNode('organization', 'SDL Group')
                    developer.appendNode('organizationUrl', 'http://www.sdl.com')
                }
                addDeveloper(developers.appendNode('developer'), 'rpannekoek', 'Rick Pannekoek', 'rpannekoek@sdl.com')
                addDeveloper(developers.appendNode('developer'), 'azarakovskiy', 'Alexey Zarakovskiy', 'azarakovskiy@sdl.com')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/sdl/dxa-web-application-java')
                scm.appendNode('connection', 'scm:git:git@github.com:sdl/dxa-web-application-java.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:sdl/dxa-web-application-java.git')
            }
        }

        if (isRelease) {
            gpgs(MavenPublication) {
                println getSignatureFiles()
                getSignatureFiles().each { signature ->
                    artifact(signature.archive) {
                        classifier = signature.classifier
                        extension = signature.extension
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (!isRelease) {
                if (project.hasProperty("remoteRepoUrl")) {
                    name "custom-remote-repo"
                    url project["remoteRepoUrl"]
                } else {
                    name "sonatype-nexus-snapshots"
                    url "https://oss.sonatype.org/content/repositories/snapshots"
                }
            } else {
                name "sonatype-nexus-staging"
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }

            if (project.hasProperty("publishUsername") && project.hasProperty("publishPassword")) {
                credentials {
                    username project.publishUsername
                    password project.publishPassword
                }
            }
            if (project.hasProperty("publishCredentials") && project.publishCredentials.contains(":")) {
                def creds = project.publishCredentials.split(':')
                credentials {
                    username creds[0]
                    password creds[1]
                }
            }
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.jdom:jdom2:2.0.5'
    compile 'jaxen:jaxen:1.1.6'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.5.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}
